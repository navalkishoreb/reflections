What happens when you initialize a repository? Why do you need to do it?
  The moment we init a directory as git repository it marks all files and sub folders inside current directories as untracked files.
  We need to init repository to inform git system so that is can start tracking and versioning the directory.
  ------------------------------------------------------------------------------------------------

How is the staging area different from the working directory and the repository? What value do you think it offers?

  Working directory is the actual directory in the file system which we are supposed to track.
  After we initialize git in our working directory it also becomes a repository, and now git is able to track changes occurring in files and  sub-directories.
  The moment we update any file or create any file, git will recognise changes. (Use git status)
  If it is a new file it will be shown as untracked files.
  And it is a tracked file it will shown as not staged for commit.

  Staging area signifies the content or files that will be committed or saved in the commit version.
  Concept of staging provides very strong control over which files can be tracked are needed to be tracked without being bothered about other files that may exist in working directory.
  ------------------------------------------------------------------------------------------------

How can you use the staging area to make sure you have one commit per logical change?
  So, we may have perform changes in multiple files. We add only those file to staging area which belongs to one logical change. While considering these staged files will be bundled up in a single commit.
  ------------------------------------------------------------------------------------------------

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
  Branches, represent an evolution tree. A branch may have all the features/ commits from which it has been forked, with some additional features.

  Branches can correspond to different flavour of out current product, which could either be performed as long haul or as early proof of concept.
  ------------------------------------------------------------------------------------------------

How do the diagrams help you visualize the branch structure?
  Diagrams help me diagnose reachability of commits under certain branches.
  It reveals from which commit have all branches have diverged, signifying what functionality to expect in particular branch.
  ------------------------------------------------------------------------------------------------

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
  After merging we are able to access commits of both branches from this newly merged branch. In diagram we ought to show what commits were introduced from either branch.
  ------------------------------------------------------------------------------------------------
